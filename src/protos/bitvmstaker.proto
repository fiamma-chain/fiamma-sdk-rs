syntax = "proto3";
package fiamma.bitvmstaker;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "fiamma/x/bitvmstaker/types";


// Params defines the parameters for the module.
message Params {
    option (amino.name) = "fiamma/x/bitvmstaker/Params";
    option (gogoproto.equal) = true;
}

// GenesisState defines the bitvmstaker module's genesis state.
message GenesisState {
    // params defines all the parameters of the module.
    Params params = 1 [
      (gogoproto.nullable) = false,
      (amino.dont_omitempty) = true
    ];
    string committee_address = 2;
    repeated string staker_addresses = 3;
}

// StakerInfo is the data structure for the BitVM staker information
message StakerInfo {
    uint64 staker_index = 1;
    string staker_address = 2;
}

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams           (MsgUpdateParams          ) returns (MsgUpdateParamsResponse          );
  rpc CreateStaker           (MsgCreateStaker          ) returns (MsgCreateStakerResponse          );
  rpc RemoveStaker            (MsgRemoveStaker           ) returns (MsgRemoveStakerResponse           );
  rpc UpdateCommitteeAddress (MsgUpdateCommitteeAddress) returns (MsgUpdateCommitteeAddressResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                            "authority";
  option           (amino.name) = "fiamma/x/bitvmstaker/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateStaker {
  option (cosmos.msg.v1.signer) = "creator";
  string creator        = 1;
  string staker_address = 2;
}

message MsgCreateStakerResponse {}

message MsgRemoveStaker {
  option (cosmos.msg.v1.signer) = "creator";
  string creator        = 1;
  string staker_address = 2;
}

message MsgRemoveStakerResponse {}

message MsgUpdateCommitteeAddress {
  option (cosmos.msg.v1.signer) = "creator";
  string creator             = 1;
  string new_committee_address = 2;
}

message MsgUpdateCommitteeAddressResponse {}

// Query defines the gRPC querier service.
service Query {
  
    // Parameters queries the parameters of the module.
    rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
      option (google.api.http).get = "/fiamma/bitvmstaker/params";
    
    }
    
    // QueryAllStakerInfoRequest is the request type for the Query/AllStakerInfo RPC method.
    rpc AllStakerInfo (QueryAllStakerInfoRequest) returns (QueryAllStakerInfoResponse) {
      option (google.api.http).get = "/fiamma/bitvmstaker/get_all_staker_info";
    
    }
    
    // QueryCommitteeAddressRequest is the request type for the Query/CommitteeAddress RPC method.
    rpc CommitteeAddress (QueryCommitteeAddressRequest) returns (QueryCommitteeAddressResponse) {
      option (google.api.http).get = "/fiamma/bitvmstaker/committee_address";
    
    }
  }
  // QueryParamsRequest is request type for the Query/Params RPC method.
  message QueryParamsRequest {}
  // QueryParamsResponse is response type for the Query/Params RPC method.
  message QueryParamsResponse {
    
    // params holds all the parameters of this module.
    Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  }
  message QueryAllStakerInfoRequest {
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
  }
  message QueryAllStakerInfoResponse {
    repeated fiamma.bitvmstaker.StakerInfo all_staker_info = 1 [(gogoproto.nullable) = false];
    cosmos.base.query.v1beta1.PageResponse pagination      = 2;
  }
  message QueryCommitteeAddressRequest {}
  message QueryCommitteeAddressResponse {
    string committeeAddress = 1;
}
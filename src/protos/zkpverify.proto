syntax = "proto3";
package zkpverify;

// import "params.proto";
import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "fiamma/x/zkpverify/types";

// Params defines the parameters for the module.
message Params {
  option (amino.name) = "fiamma/x/zkpverify/Params";
  option (gogoproto.equal) = true;
}

// GenesisState defines the zkpverify module's genesis state.
message GenesisState {
  // params defines all the parameters of the module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// VerificationStatus is the verification status for the proof verification
enum VerificationStatus { 
  INITIAL_VALIDATION = 0;
  COMMUNITY_VALIDATION = 1;
  DEFINITIVE_VALIDATION = 2;
}

// DataLocation is the proof data location for the proof verification
enum DataLocation {
  FIAMMA = 0; 
  NUBITDA = 1;
  AVAILDA = 2;
}

// ProofSystem is the proof system for the proof verification
enum ProofSystem {
  GROTH16_BN254_BITVM = 0; 
  PLONK_BN254 = 1;
  PLONK_BLS12_381 = 2; 
  GROTH16_BN254 = 3; 
  SP1 = 4; 
}

// ProofData is the data structure for the proof verification request
message ProofData {
  ProofSystem proof_system = 1;
  bytes proof = 2;
  bytes public_input = 3;
  bytes vk = 4;
}

// VerifyResult is the data structure for the proof verification result
message VerifyResult {
  string proof_id = 1;
  ProofSystem proof_system = 2;
  string data_commitment = 3;
  DataLocation data_location = 4;
  bool result = 5;
  VerificationStatus status = 6;
  uint64 community_verification_count = 7;
}

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // SubmitProof defines a (zkpverify) operation for verifying a proof.
  rpc SubmitProof(MsgSubmitProof) returns (MsgSubmitProofResponse);
  // SubmitCommunityVerification defines a community (zkpverify) operation for verifying a proof.
  rpc SubmitCommunityVerification(MsgSubmitCommunityVerification) returns (MsgSubmitCommunityVerificationResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "fiamma/x/zkpverify/MsgUpdateParams";
  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // params defines the module parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgSubmitProof is the proof verify verification request type.
message MsgSubmitProof {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string proof_system = 2;
  bytes proof = 3;
  bytes public_input = 4;
  bytes vk = 5;
}

// MsgSubmitProofResponse defines the response structure for executing MsgSubmitProof
message MsgSubmitProofResponse {}

// MsgSendTaskResponse defines the response structure for executing MsgSendTask
message MsgSendTaskResponse {}

// MsgSubmitCommunityVerification is the proof verify community verification request type.
message MsgSubmitCommunityVerification {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string proof_id = 2;
  bool verify_result = 3;
}

// MsgSubmitCommunityVerificationResponse defines the response structure for executing MsgSubmitCommunityVerification
message MsgSubmitCommunityVerificationResponse {}

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/fiamma/zkpverify/params";
  }
  // Queries a list of PendingProof items.
  rpc PendingProof(QueryPendingProofRequest)
      returns (QueryPendingProofResponse) {
    option (google.api.http).get = "/fiamma/zkpverify/pending_proof";
  }
  // Queries proof data by proof id
  rpc ProofData(QueryProofDataRequest)
      returns (QueryProofDataResponse) {
    option (google.api.http).get = "/fiamma/zkpverify/get_proof_data";
  }
  rpc VerifyResult(QueryVerifyResultRequest)
      returns (QueryVerifyResultResponse) {
    option (google.api.http).get = "/fiamma/zkpverify/get_verify_result";
  }
  // Queries bitvm witness by proof id
  rpc BitVMWitness(QueryBitVMWitnessRequest)
      returns (QueryBitVMWitnessResponse) {
    option (google.api.http).get = "/fiamma/zkpverify/get_bitvm_witness";
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}
// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
// QueryPendingProofRequest is request type for the Query/PendingProof RPC
// method.
message QueryPendingProofRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
// QueryPendingProofResponse is response type for the Query/PendingProof RPC
// method.
message QueryPendingProofResponse {
  repeated  VerifyResult pending_proofs = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
// QueryProofDataRequest is request type for the Query/ProofData RPC
// method.
message QueryProofDataRequest {
  string proof_id = 1;
}
// QueryProofDataResponse is response type for the Query/ProofData RPC
// method.
message QueryProofDataResponse { 
  ProofData proof_data = 1;
}
// QueryVerifyResultRequest is request type for the Query Proof verify result RPC
message QueryVerifyResultRequest {
  string proof_id = 1;
}
// QueryVerifyResultResponse is response type for the Query Proof verify result RPC
message QueryVerifyResultResponse { 
  VerifyResult verify_result = 1;
}
// QueryBitVMWitnessRequest is request type for the Query/BitVMWitness RPC 
// method.
message QueryBitVMWitnessRequest {
  string proof_id = 1;
}
// QueryBitVMWitnessResponse is response type for the Query/BitVMWitness RPC
// method.
message QueryBitVMWitnessResponse {
  string witness = 1;
}